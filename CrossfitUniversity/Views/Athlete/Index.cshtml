@model PagedList.IPagedList<CrossfitUniversity.Models.Athlete>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Athletes";
}

<h2>Athletes</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm("Index", "Athlete", FormMethod.Get))
{
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}

<table class="table" id="AthleteList">
    <tr>
        <th>
           CfId
        </th>
        <th>
            @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Region", "Index", new { sortOrder = ViewBag.RegionSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
           Team
        </th>
        <th>
           Gender
        </th>
        <th>
           Age
        </th>
        <th>
           Height
        </th>
        <th>
           Weight
        </th>
        <th>
           Fran
        </th>
        <th>
           Helen
        </th>
        <th>
           Grace
        </th>
        <th>
           Filthy50
        </th>
        <th>
           Fgonebad
        </th>
        <th>
           Run400
        </th>
        <th>
           Run5k
        </th>
        <th>
           Candj
        </th>
        <th>
           Snatch
        </th>
        <th>
           Deadlift
        </th>
        <th>
           Backsq
        </th>
        <th>
           Pullups
        </th>
        <th>
           Eat
        </th>
        <th>
           Train
        </th>
        <th>
           Background
        </th>
        <th>
           Experience
        </th>
        <th>
           Schedule
        </th>
        <th>
           Howlong
        </th>
        <th>
           RetrievedDatetime
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.CfId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Region)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Team)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Gender)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Age)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Height)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Weight)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Fran)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Helen)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Grace)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Filthy50)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Fgonebad)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Run400)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Run5k)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Candj)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Snatch)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Deadlift)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Backsq)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Pullups)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Eat)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Train)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Background)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Experience)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Schedule)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Howlong)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.RetrievedDatetime)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.AthleteId }) |
            @Html.ActionLink("Details", "Details", new { id=item.AthleteId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.AthleteId })
        </td>
    </tr>
}

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))


@section scripts
{

    <script type="text/javascript">
        // Adding popstate event listener to handle browser back button
        window.addEventListener("popstate", function (e) {
            $.ajax({
                url: location.href,
                success: function (result) {
                    $('#AthleteList').html(result);
                }
            });
        });

        function ChangeUrl(page, url) {
            if (typeof (history.pushState) != "undefined") {
                var obj = { Page: page, Url: url };
                history.pushState(null, obj.Page, obj.Url);
            } else {
                alert("Browser does not support HTML5.");
            }
        }

        function getUrlVars() {
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        }
        /*
        function search() {
            $.ajax({
                url: "/Home/Index?searchString=" + $('#SearchString').val(),
                success: function(result) {
                    ChangeUrl("index", "/Home/Index?searchString=" + $('#SearchString').val());
                    $('#ProductList').html(result);
                }
            });
        }*/
        /*
        $(function() {
            $("#btnSearch").click(function() {
                search();
            });

            $("#SearchString").keypress(function(e) {
                if (e.keyCode == 13) {
                    search();
                }
            });
            */
        $('body').on('click', '.pagination-container a', function (event) {
                event.preventDefault();
                console.log('page');
                var searchString = $('#SearchString').val();
                if (searchString == undefined || searchString == '') {
                    searchString = '';
                } else {
                    searchString = '&searchString=' + searchString;
                }
                var url = $(this).attr('href') + searchString;
                console.log(url);
                $.ajax({
                    url: url,
                    success: function(result) {
                        ChangeUrl('index', url);
                        $('#AthleteList').html(result);
                    }
                });
            });

/*
            $('body').on('click', '#ProductList .table a', function(event) {

                event.preventDefault();

                var searchString = $('#SearchString').val();
                if (searchString == undefined || searchString == '') {
                    searchString = '';
                } else {
                    searchString = '&searchString=' + searchString;
                }

                var columnToSort = $(this).text();
                var currentSortOption = getUrlVars()['sortOption'];
                console.log(currentSortOption);
                var sort;
                switch (currentSortOption) {
                case "name_acs":
                    sort = 'sortOption=name_desc';
                    break;
                case "name_desc":
                    sort = 'sortOption=name_acs';
                    break;
                case "price_acs":
                    sort = 'sortOption=price_desc';
                    break;
                case "price_desc":
                    sort = 'sortOption=price_acs';
                    break;
                case "qty_acs":
                    sort = 'sortOption=qty_desc';
                    break;
                case "qty_desc":
                    sort = 'sortOption=qty_acs';
                    break;
                default:
                    sort = '';
                    break;
                }


                switch (columnToSort) {
                case 'Name':
                    if (currentSortOption != 'name_acs' && currentSortOption != 'name_desc') {
                        sort = 'sortOption=name_acs';
                    }
                    break;
                case 'Price':
                    if (currentSortOption != 'price_acs' && currentSortOption != 'price_desc') {
                        sort = 'sortOption=price_acs';
                    }
                    break;
                case 'Qty':
                    if (currentSortOption != 'qty_acs' && currentSortOption != 'qty_decs') {
                        sort = 'sortOption=qty_acs';
                    }
                    break;
                default:
                    sort = '';
                    break;

                }
                if (sort != '' & searchString != '') {
                    sort = '&' + sort;
                }
                var url = '/Home/Index?' + searchString + sort;
                $.ajax({
                    url: url,
                    success: function(result) {
                        ChangeUrl('index', url);
                        $('#ProductList').html(result);
                    }
                });
            });
            */
        
        
    </script>


}